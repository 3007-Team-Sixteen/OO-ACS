name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gcc \
          make \
          clang-tools \
          cppcheck \
          valgrind \
          afl-fuzz \
          gcovr \
          python3-pip \
          libssl-dev \
          libcrypto++-dev \
          libgcrypt-dev \
          libsodium-dev
        pip3 install flawfinder bandit

    - name: Build project
      working-directory: ./DEV_ENV_SERVER
      run: |
        if [ -f "build_scripts/build.sh" ]; then
          chmod +x build_scripts/build.sh
          ./build_scripts/build.sh
        else
          make
        fi

    - name: Static Analysis - Clang
      working-directory: ./DEV_ENV_SERVER
      run: |
        scan-build make
        clang-tidy --checks='*' ./access/*.c

    - name: Static Analysis - GCC
      working-directory: ./DEV_ENV_SERVER
      run: |
        gcc -Wall -Wextra -Werror -Wpedantic -Wformat=2 -Wformat-security -Wstack-protector -fstack-protector-strong -fstack-clash-protection -fPIC -D_FORTIFY_SOURCE=2 -O2 -g -o /dev/null ./access/*.c

    - name: Static Analysis - Cppcheck
      working-directory: ./DEV_ENV_SERVER
      run: |
        cppcheck --enable=all --suppress=missingInclude ./access/

    - name: Static Analysis - Flawfinder
      working-directory: ./DEV_ENV_SERVER
      run: |
        flawfinder --quiet --singleline ./access/

    - name: Static Analysis - Bandit
      working-directory: ./DEV_ENV_SERVER
      run: |
        bandit -r ./access/

    - name: Build with Sanitizers
      working-directory: ./DEV_ENV_SERVER
      run: |
        # Address Sanitizer
        gcc -fsanitize=address -fno-omit-frame-pointer -g -o test_asan ./access/*.c
        # Thread Sanitizer
        gcc -fsanitize=thread -fno-omit-frame-pointer -g -o test_tsan ./access/*.c
        # Undefined Behavior Sanitizer
        gcc -fsanitize=undefined -fno-omit-frame-pointer -g -o test_ubsan ./access/*.c
        # Memory Sanitizer
        gcc -fsanitize=memory -fno-omit-frame-pointer -g -o test_msan ./access/*.c

    - name: Run Tests with Sanitizers
      working-directory: ./DEV_ENV_SERVER
      run: |
        # Run Address Sanitizer tests
        ASAN_OPTIONS=detect_leaks=1 ./test_asan
        # Run Thread Sanitizer tests
        ./test_tsan
        # Run Undefined Behavior Sanitizer tests
        ./test_ubsan
        # Run Memory Sanitizer tests
        MSAN_OPTIONS=poison_in_dtor=1 ./test_msan

    - name: Memory Analysis with Valgrind
      working-directory: ./DEV_ENV_SERVER
      run: |
        if [ -f "./build/test_suite" ]; then
          valgrind --leak-check=full --error-exitcode=1 --track-origins=yes ./build/test_suite
        fi

    - name: Fuzzing with AFL
      working-directory: ./DEV_ENV_SERVER
      run: |
        # Build with AFL instrumentation
        CC=afl-gcc make
        # Create test cases directory
        mkdir -p testcases
        # Create initial test cases
        echo "test" > testcases/test1
        # Run fuzzer
        timeout 300 afl-fuzz -i testcases -o findings ./build/test_suite

    - name: Code Coverage
      working-directory: ./DEV_ENV_SERVER
      run: |
        # Build with coverage flags
        gcc -fprofile-arcs -ftest-coverage -o test_coverage ./access/*.c
        # Run tests
        ./test_coverage
        # Generate coverage report
        gcovr --root . --html --html-details -o coverage.html

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./DEV_ENV_SERVER/coverage.html

    - name: Security Analysis - STRIDE
      working-directory: ./DEV_ENV_SERVER
      run: |
        # Check for common STRIDE vulnerabilities
        # Spoofing
        grep -r "strcpy\|strcat\|sprintf" ./access/
        # Tampering
        grep -r "access\|chmod\|chown" ./access/
        # Information Disclosure
        grep -r "printf\|fprintf\|sprintf" ./access/
        # Elevation of Privilege
        grep -r "setuid\|setgid\|exec" ./access/

    - name: Input Validation Check
      working-directory: ./DEV_ENV_SERVER
      run: |
        # Check for proper input validation
        grep -r "scanf\|gets\|fgets" ./access/
        # Check for buffer size validation
        grep -r "malloc\|calloc\|realloc" ./access/

    - name: Cryptographic Analysis
      working-directory: ./DEV_ENV_SERVER
      run: |
        # Check for cryptographic function usage
        grep -r "crypt\|encrypt\|decrypt" ./access/
        # Check for hardcoded keys/passwords
        grep -r "password\|key\|secret" ./access/ 