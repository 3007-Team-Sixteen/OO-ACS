name: Main CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v4

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible and ansible-lint
        run: pip install ansible ansible-lint

      - name: Run ansible-lint
        # Consider adding a .ansible-lint config file for customization
        run: ansible-lint ansible/playbooks/*.yml ansible/roles/

  # Renamed job for clarity
  provision-configure-test:
    name: Provision, Configure, and Test Testing Env
    needs: lint # Run after linting passes
    runs-on: ubuntu-latest
    # Only run on push to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v4

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible and dependencies
        run: |
          pip install ansible linode_api4 ansible_specdoc
          ansible-galaxy collection install linode.cloud

      - name: Setup SSH Agent for Ansible Connection
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "SSH_PRIVATE_KEY secret not set!"
            exit 1
          fi
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "Starting ssh-agent"
          eval "$(ssh-agent -s)"
          echo "Adding SSH key"
          # Use process substitution to avoid temporary file
          ssh-add <(echo "$SSH_PRIVATE_KEY")
          echo "SSH Agent configured."
          # Optional: Configure ssh to ignore host key checking for this run
          echo -e "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Create Vault Password File from Secret
        env:
          VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          if [ -z "$VAULT_PASSWORD" ]; then
            echo "ANSIBLE_VAULT_PASSWORD secret not set!"
            exit 1
          fi
          mkdir -p ~/.ansible
          echo "$VAULT_PASSWORD" > ~/.ansible/vault_pass.txt
          chmod 600 ~/.ansible/vault_pass.txt
          echo "Vault password file created for pipeline."

      - name: Run Testing Provisioning Playbook
        env:
          LINODE_TOKEN: ${{ secrets.LINODE_API_TOKEN }}
          # Override vault file setting from ansible.cfg for the runner env
          ANSIBLE_VAULT_PASSWORD_FILE: ~/.ansible/vault_pass.txt
        run: |
          if [ -z "$LINODE_TOKEN" ]; then
            echo "LINODE_API_TOKEN secret not set!"
            exit 1
          fi
          ansible-playbook ansible/playbooks/provision_instance.yml -e "env_name=testing" -e "instance_type=g6-nanode-1"

      - name: Run Testing Configuration Playbook
        env:
          # Override vault file setting from ansible.cfg for the runner env
          ANSIBLE_VAULT_PASSWORD_FILE: ~/.ansible/vault_pass.txt
          # SSH Agent handles authentication
        run: |
          echo "Running configuration playbook..."
          # Need slight delay for SSH daemon to be fully ready on new instance?
          sleep 15
          ansible-playbook ansible/playbooks/configure_testing.yml

      # --- Placeholder for Build/Test steps ---
      - name: Build and Test on Target (Placeholder)
        env:
           # Override vault file setting from ansible.cfg for the runner env
           ANSIBLE_VAULT_PASSWORD_FILE: ~/.ansible/vault_pass.txt
           # SSH Agent handles authentication
        run: |
          echo "TODO: Add steps to clone repo, build, and test on target"
          # Example using ansible command module (needs more robust playbook/role ideally):
          # ansible linode_testing_instances -m git -a "repo=https://github.com/${{ github.repository }}.git dest=/opt/oo-acs/src version=${{ github.sha }}"
          # ansible linode_testing_instances -m command -a "chdir=/opt/oo-acs/src cmake ."
          # ansible linode_testing_instances -m command -a "chdir=/opt/oo-acs/src make"
          # ansible linode_testing_instances -m command -a "chdir=/opt/oo-acs/src ./run_tests" # Replace with your test runner command
          exit 0 # Placeholder exit
      # --- End Placeholder --- 