---
- name: Provision Linode Staging Environment
  hosts: localhost
  gather_facts: no
  vars_files:
    - ../group_vars/all/vault.yml # Explicitly include vault file
  vars:
    linode_instance_label: oo-acs-staging
    linode_instance_type: g6-standard-1 # 2GB Standard
    linode_instance_region: ap-southeast # Sydney, AU
    linode_instance_image: linode/ubuntu20.04
    linode_instance_tags:
      - staging
      - oo-acs
    linode_ssh_pub_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHkzQ7fAkTmclUvsWBxKBmNrBcipmLEfk0+nQD6X/HDH unixthat@Stephens-MacBook-Air.local"
    linode_firewall_name: fw-staging-basic
    ssh_key_path: "/Users/unixthat/.ssh/keys/linodeKey"

  tasks:
    - name: Ensure Linode API token is set
      fail:
        msg: "LINODE_TOKEN environment variable is not set. Please set it before running this playbook."
      when: lookup('env', 'LINODE_TOKEN') | length == 0
      run_once: yes

    - name: Delete existing Staging instance (if any) for a clean build
      linode.cloud.instance:
        label: "{{ linode_instance_label }}"
        state: absent
      delegate_to: localhost
      ignore_errors: yes
      register: delete_result

    - name: Wait for instance deletion
      pause:
        seconds: 30
      when: not delete_result.failed

    - name: Create Linode Staging instance
      linode.cloud.instance: # Use FQCN
        label: "{{ linode_instance_label }}"
        type: "{{ linode_instance_type }}"
        region: "{{ linode_instance_region }}"
        image: "{{ linode_instance_image }}"
        root_pass: "{{ vault_linode_root_password }}" # Reverted back to Vault variable
        authorized_keys:
          - "{{ linode_ssh_pub_key }}"
        tags: "{{ linode_instance_tags }}"
        state: present
      register: staging_instance # Use staging_instance variable
      delegate_to: localhost # Explicitly run on control node

    - name: Wait for instance to be ready
      wait_for_connection:
        delay: 10
        timeout: 300
      when: staging_instance.changed

    - name: Add host to inventory
      add_host:
        name: "{{ staging_instance.instance.ipv4[0] }}" # Use the first public IPv4
        groups: linode_staging_instances # Add to staging group
        ansible_user: root # Initially connect as root
        ansible_ssh_private_key_file: "{{ ssh_key_path }}"
      when: staging_instance.changed

    - name: Create Linode Firewall for Staging instance
      linode.cloud.firewall:
        label: "{{ linode_firewall_name }}"
        rules:
          inbound_policy: DROP
          outbound_policy: ACCEPT
          inbound:
            - label: allow-ssh
              protocol: TCP
              ports: '22'
              addresses:
                ipv4: ['0.0.0.0/0']
                ipv6: ['::/0']
              action: ACCEPT
            - label: allow-http
              protocol: TCP
              ports: '80'
              addresses:
                ipv4: ['0.0.0.0/0']
                ipv6: ['::/0']
              action: ACCEPT
            - label: allow-https
              protocol: TCP
              ports: '443'
              addresses:
                ipv4: ['0.0.0.0/0']
                ipv6: ['::/0']
              action: ACCEPT
            - label: allow-staging-ports
              protocol: TCP
              ports: '9000-9999'
              addresses:
                ipv4: ['0.0.0.0/0']
                ipv6: ['::/0']
              action: ACCEPT
        devices:
          - id: "{{ staging_instance.instance.id | int }}"
        state: present
      delegate_to: localhost
      when: staging_instance.changed

    - name: Display Staging Instance IP
      debug:
        msg: "Staging instance created with IP: {{ staging_instance.instance.ipv4[0] }}"
      when: staging_instance.changed

    - name: Debug playbook directory
      debug:
        msg: "Playbook directory is: {{ playbook_dir }}"
      when: staging_instance.changed

    - name: Update inventory with new instance IP
      shell: "cd {{ playbook_dir }}/../../ && ./tools/update_inventory.sh staging {{ staging_instance.instance.ipv4[0] }}"
      delegate_to: localhost
      when: staging_instance.changed 