---
- name: Provision Linode Instance for {{ env_name | default('unknown') }} Environment
  hosts: localhost
  gather_facts: no
  vars_files:
    - ../group_vars/all/vault.yml # Explicitly include vault file

  # Define default/expected variables (can be overridden with -e "var=value")
  vars:
    # Environment specific (MUST BE PROVIDED VIA -e)
    env_name: "{{ env_name | default(lookup('env', 'ANSIBLE_ENV'), true) | default(fail('env_name variable is required. Pass with -e "env_name=testing|staging|production"')) }}"
    instance_label: "{{ instance_label | default('oo-acs-' + env_name) }}"
    instance_type: "{{ instance_type | default(fail('instance_type variable is required. Pass with -e "instance_type=g6-nanode-1|g6-standard-1"')) }}"
    instance_tags: "{{ instance_tags | default([env_name, 'oo-acs']) }}"
    firewall_name: "{{ firewall_name | default('fw-' + env_name + '-basic') }}"
    inventory_group: "{{ inventory_group | default('linode_' + env_name + '_instances') }}"

    # Shared variables (can be overridden if needed)
    linode_instance_region: ap-southeast # Sydney, AU
    linode_instance_image: linode/ubuntu20.04
    # Assuming linodeKey is standard for all initial provisioning
    linode_ssh_pub_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHkzQ7fAkTmclUvsWBxKBmNrBcipmLEfk0+nQD6X/HDH unixthat@Stephens-MacBook-Air.local"
    # Using vault variable for root password
    # vault_linode_root_password: defined in vault.yml

  tasks:
    - name: Ensure Linode API token is set
      fail:
        msg: "LINODE_TOKEN environment variable is not set. Please set it before running this playbook."
      when: lookup('env', 'LINODE_TOKEN') | length == 0
      run_once: yes

    - name: Delete existing {{ env_name }} instance (if any) for a clean build
      linode.cloud.instance:
        label: "{{ instance_label }}"
        state: absent
      delegate_to: localhost
      ignore_errors: yes # Don't fail if the instance doesn't exist

    - name: Create Linode {{ env_name }} instance
      linode.cloud.instance: # Use FQCN
        label: "{{ instance_label }}"
        type: "{{ instance_type }}"
        region: "{{ linode_instance_region }}"
        image: "{{ linode_instance_image }}"
        root_pass: "{{ vault_linode_root_password }}" # From vault file
        authorized_keys:
          - "{{ linode_ssh_pub_key }}"
        tags: "{{ instance_tags }}"
        state: present
      register: provisioned_instance # Generic variable name
      delegate_to: localhost # Explicitly run on control node

    - name: Add new instance to dynamic inventory group {{ inventory_group }}
      add_host:
        name: "{{ provisioned_instance.instance.ipv4[0] }}" # Use the first public IPv4
        groups: "{{ inventory_group }}"
        ansible_user: root # Initially connect as root
        ansible_ssh_private_key_file: ~/.ssh/linodeKey # Standard key for initial access
      when: provisioned_instance.changed

    - name: Create Linode Firewall for {{ env_name }} instance
      linode.cloud.firewall: # Use FQCN
        label: "{{ firewall_name }}"
        rules: # Dictionary containing policies and rule lists
          inbound_policy: DROP  # Default policy for inbound
          outbound_policy: ACCEPT # Default policy for outbound
          inbound: # List of inbound rules
            - label: allow-ssh
              protocol: TCP
              ports: '22'
              addresses:
                ipv4: ['0.0.0.0/0']
                ipv6: ['::/0']
              action: ACCEPT
        devices: # List of dictionaries
          - id: "{{ provisioned_instance.instance.id | int }}"
            # type: linode # Optional, defaults to linode
        state: present
      delegate_to: localhost # Explicitly run on control node
      when: provisioned_instance.changed

    - name: Display {{ env_name | capitalize }} Instance IP
      debug:
        msg: "{{ env_name | capitalize }} instance ({{ instance_label }}) created with IP: {{ provisioned_instance.instance.ipv4[0] }}"
      when: provisioned_instance.changed

    - name: Set instance IP fact for potential capture
      set_stats:
        data:
          provisioned_ip: "{{ provisioned_instance.instance.ipv4[0] | default('') }}"
        per_host: no # Make it available globally for the play
      when: provisioned_instance.instance is defined # Only set if instance exists 